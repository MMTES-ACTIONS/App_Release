name: Release Build and Deploy

on:
  push:
    tags:
      - 'v*.*.*'  # Executa quando uma nova tag de versão é criada, como v1.0.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Check out repository code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -X clean package --file pom.xml

      - name: List target directory contents
        run: ls -la target

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp.jar
          path: target/MyApp-1.0-SNAPSHOT.jar

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install jq
        run: sudo apt-get install -y jq

      # Verifica se uma release com a tag já existe e a exclui
      - name: Delete existing release if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          release_id=$(echo "$response" | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Release exists with ID $release_id. Deleting it."
            curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases/$release_id
          else
            echo "No existing release found with tag ${{ github.ref_name }}."
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Set upload_url output
        run: |
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
          echo "upload_url=${{ steps.create_release.outputs.upload_url }}"

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: target/MyApp-1.0-SNAPSHOT.jar
          asset_name: myapp.jar
          asset_content_type: application/java-archive
